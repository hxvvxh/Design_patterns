观察者模式(Observer Pattern)：
                定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。
                观察者模式是一种对象行为型模式。
                
观察者模式的别名包括
                 发布-订阅（Publish/Subscribe）模式、
                 模型-视图（Model/View）模式、
                 源-监听器（Source/Listener）模式
                 或从属者（Dependents）模式。
                 
角色
Subject（目标）：
                 目标又称为主题，它是指被观察的对象。
                 在目标中定义了一个观察者集合，一个观察目标可以接受任意数量的观察者来观察，
                 它提供一系列方法来增加和删除观察者对象，同时它定义了通知方法notify()。
                 目标类可以是接口，也可以是抽象类或具体类。

ConcreteSubject（具体目标）：
                 具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；
                 同时它还实现了在目标类中定义的抽象业务逻辑方法（如果有的话）。如果无须扩展目标类，则具体目标类可以省略。

Observer（观察者）：
                 观察者将对观察目标的改变做出反应，观察者一般定义为接口，
                 该接口声明了更新数据的方法update()，
                 因此又称为抽象观察者。

ConcreteObserver（具体观察者）：
                在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，
                这些状态需要和具体目标的状态保持一致；
                它实现了在抽象观察者Observer中定义的update()方法。
                通常在实现时，
                可以调用具体目标类的attach()方法将自己添加到目标类的集合中或通过detach()方法将自己从目标类的集合中删除。






Subscriber:订阅者接口（观察者 ）
WeChatClient:具体观察者
Publisher：发布者类（目标，被观察对象），该类维护了一个订阅者列表，实现了订阅、取消订阅、通知所有订阅者等功能
WeChatAccounts:微信公众号类（具体目标），该类提供了 publishArticles 方法，用于发布推送，当文章发布完毕时调用父类的通知所有订阅者方法
Test：测试



JDK提供的观察者接口
    Observable 类以及 Observer 接口
    Observer 接口为观察者，只有一个 update 方法，当观察目标发生变化时被调用
    Observable 类则为目标类，相比我们的示例中的 Publisher 类多了并发和NPE方面的考虑

Guava 提供的观察者支持 
   EventBus 封装了友好的 "生产/消费模型"，通过非常简单的方式，实现了观察者模式中的监听注册，事件分发
   Guava EventBus 之后，如果需要订阅消息，不需要实现任何接口，只需在监听方法上加上 @Subscribe 注解即可，EventBus 提供了 register 和 unregister 方法用于注册与取消注册事件，当 EventBus 调用 post 方法时将把事件分发给注册的对象

Spring ApplicationContext 事件机制中的观察者模式(!!!!!!!!!!重点！！！！！！！)
   spring的事件机制是从java的事件机制拓展而来，
   ApplicationContext 中事件处理是由 ApplicationEvent 类和 ApplicationListener 接口来提供的。
       如果一个Bean实现了 ApplicationListener 接口，并且已经发布到容器中去，
       每次 ApplicationContext 发布一个 ApplicationEvent 事件，这个Bean就会接到通知
       
   
    ApplicationContext：事件源，其中的 publishEvent()方法用于触发容器事件
    ApplicationEvent：事件本身，自定义事件需要继承该类，可以用来传递数据
    ApplicationListener：事件监听器接口，事件的业务逻辑封装在监听器里面
   


           